name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-west-2
  TERRAFORM_VERSION: 1.5.7

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          args: --timeout=5m
      
      - name: Check code formatting
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted correctly:"
            gofmt -l .
            exit 1
          fi

  build-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy-staging:
    name: Deploy to Staging
    needs: build-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    concurrency: staging-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
      
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="app_name=blockchain-client-staging" \
            -var="environment=staging" \
            -var="container_image=${{ needs.build-image.outputs.image_tag }}" \
            -out=tfplan
      
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
      
      - name: Verify Deployment
        run: |
          echo "Verifying staging deployment..."
          ENDPOINT=$(terraform -chdir=./terraform output -raw alb_https_endpoint)
          ATTEMPTS=0
          MAX_ATTEMPTS=10
          
          until $(curl --output /dev/null --silent --fail $ENDPOINT/health); do
            if [ ${ATTEMPTS} -eq ${MAX_ATTEMPTS} ]; then
              echo "Max attempts reached. Deployment verification failed!"
              exit 1
            fi
            
            ATTEMPTS=$((ATTEMPTS+1))
            echo "Waiting for endpoint to be available... (Attempt: $ATTEMPTS/$MAX_ATTEMPTS)"
            sleep 30
          done
          
          echo "Staging deployment verified successfully!"

  approve-production:
    name: Approve Production Deployment
    needs: [build-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production-approval
    steps:
      - name: Production deployment approval
        run: echo "Production deployment approved!"

  deploy-production:
    name: Deploy to Production
    needs: approve-production
    runs-on: ubuntu-latest
    environment: production
    concurrency: production-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=production/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
      
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="app_name=blockchain-client" \
            -var="environment=production" \
            -var="container_image=${{ needs.build-image.outputs.image_tag }}" \
            -var="enable_deletion_protection=true" \
            -var="allowed_cidr_blocks=${{ secrets.ALLOWED_CIDR_BLOCKS }}" \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -var="route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}" \
            -var="alarm_email=${{ secrets.ALARM_EMAIL }}" \
            -out=tfplan
      
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
      
      - name: Post Deployment Verification
        run: |
          echo "Verifying production deployment..."
          ENDPOINT=$(terraform -chdir=./terraform output -raw alb_https_endpoint)
          ATTEMPTS=0
          MAX_ATTEMPTS=12
          
          until $(curl --output /dev/null --silent --fail $ENDPOINT/health); do
            if [ ${ATTEMPTS} -eq ${MAX_ATTEMPTS} ]; then
              echo "Max attempts reached. Deployment verification failed!"
              exit 1
            fi
            
            ATTEMPTS=$((ATTEMPTS+1))
            echo "Waiting for endpoint to be available... (Attempt: $ATTEMPTS/$MAX_ATTEMPTS)"
            sleep 30
          done
          
          echo "Production deployment verified successfully!"
      
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.sha }}
          tag_name: release-${{ github.run_number }}
          generate_release_notes: true
          prerelease: false
